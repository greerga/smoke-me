#!/usr/bin/perl
use 5.010;
use strict;
use warnings;
use constant {'true' => 1, 'false' => 0};

use FindBin      qw[$Bin $Script];
use File::Copy   qw[move];
use File::Find   qw[find];
use List::Util   qw[minstr];
use IPC::Open3   qw[open3];
use Getopt::Long qw[GetOptions];
use File::Path   qw[remove_tree];

sub gsay;

# Configuration for smoke behavior.
my $remote  = "origin";
my $pattern = qr{^remotes/\Q$remote\E/smoke-me/};

# In case of fork'ing to get messages back to main process.
my $messages = "";

# Be really 'nice'.
eval { setpriority 0, 0, 20 };

# -----

my ($git, $perl, $rsync, $ssh, $workdir, $cfgtmpl, $cfg, $smokepl, $smoker, $log_dst, @cmd);
my $what = "smoke-me";

my %o = (
    'split'       => false,
    'split-smoke' => false,
    'pattern'     => \$pattern,
    'what'        => \$what,
);
GetOptions(\%o, "split-smoke!", "split!", "pattern=s", "what=s")
    or die "Unknown otions: @ARGV";

$o{'pattern'} = $pattern;
$o{'what'}    = $what;

# Configuration for installation location.
if ($^O eq "MSWin32") {
    require Storable;
    $ENV{'HOME'} = "d:/smoke";
    $git     = q{"c:/cygwin/bin/git.exe"};
    $perl    = q{"c:/perl/bin/perl.exe"};
    $rsync   = q{"c:/program files/cwrsync/bin/rsync.exe"};
    $ssh     = q{"'c:/program files/cwrsync/bin/ssh.exe'"};
    $workdir = "d:/smoke/perl/$o{'what'}";
    $cfg     = "$o{'what'}_smoke.config";
    $smokepl = "d:/smoke/driver/$o{'what'}_smoke.cmd";
    $smoker  = "d:/smoke/driver";
    $log_dst = 'perl@m-l.org:www/smoke/perl/win32';
    @cmd     = ("start", "/wait", "cmd", "/c", $smokepl);
#    @cmd     = ($smokepl);
} else {
    $git     = ("/usr/bin/git");
    $perl    = "/usr/bin/perl";
    $rsync   = "/usr/bin/rsync";
    $ssh     = "/usr/bin/ssh";
    $workdir = "$ENV{HOME}/work/smoke_$o{'what'}";
    $cfg     = "$o{'what'}_config";
    $smokepl = "$ENV{HOME}/mod/Test-Smoke/smokeperl.pl";
    $smoker  = "$ENV{HOME}/mod/smoke";
    $log_dst = 'perl@m-l.org:www/smoke/perl/linux';
    @cmd     = ($perl, $smokepl, "-c", "$o{'what'}");
}

$cfgtmpl = $cfg . ".template";

my $worksrcdir = "$workdir/source";
my $workintdir = "$workdir/inter";
my $workblddir = "$workdir/build";
my $srcdir     = "$ENV{HOME}/git/perl";
my $log        = "$o{'what'}.log";

# -----

if (! -d $worksrcdir) {
    system $rsync, "-a", $srcdir, $worksrcdir;
    die "rsync: $?"
        if $?;
} elsif (! -d "$worksrcdir/.git") {
    # Might have exited during smoking while .git/ was moved away.
    if (-d "$workdir/.git") {
        move "$workdir/.git", "$worksrcdir/.git"
            or die "$workdir/.git -> $worksrcdir/.git: move: $!";
    } else {
        die "Missing $worksrcdir/.git\n";
    }
}

my $fh;

if ($o{'split-smoke'}) {
    $SIG{'__WARN__'} = sub { $messages .= join("", @_) . "\n"; warn @_; };

    Storable::store({'_messages' => "Abnormal exit"}, "$workdir/$o{'what'}.state")
        or die "store: $!";

    my $winner = prep_git();
    $winner->{'_messages'} = $messages;
    Storable::store($winner, "$workdir/$o{'what'}.state")
        or die "store: $!";

    return 0;
}

chdir $worksrcdir
    or die "$worksrcdir: chdir: $!";

for (;;) {
    my $winner = prep_git();
    if (defined $winner && exists $winner->{'_messages'}) {
        print delete $winner->{'_messages'};
    }
    if (!defined $winner || not keys %$winner) {
        sleep 3600;
        next;
    }

    # Create .patch for Test::Smoke.
    open my $dotpatch, ">", ".patch"
        or die ".patch: open(>): $!";
    {
        my $dotpatch_iso8601 = $winner->{'ci'};
        for ($dotpatch_iso8601) {
            s/\s*[+-]\d{4}$//;
            tr/ /./;
        }
        say $dotpatch join " ", $winner->{'branch'}, $dotpatch_iso8601, $winner->{'H'},`git describe`;
    }
    close $dotpatch
        or warn ".patch: close: $!";

    # Hide .git from Test::Smoke
    move "$worksrcdir/.git", "$workdir/.git"
        or die "$worksrcdir/.git -> $workdir/.git: move: $!";

    # Delete all the .gitignore files as they're not in MANIFEST.
    find({'wanted' => \&remove_gitignore, 'no_chdir' => true}, $worksrcdir);

    # Nuke intermediate and build directories to avoid contamination.
    foreach my $rmtree_dir ($workblddir, $workintdir) {
        remove_tree $rmtree_dir
            or die "$rmtree_dir: remove_tree: $!";
        mkdir $rmtree_dir
            or die "$rmtree_dir: mkdir: $!";
    }

    # Smoking section.
    chdir $smoker
        or die "$smoker: chdir: $!";

    # Rewrite config file. (So as to e-mail the committer.)
    open my $cfgin, "<", $cfgtmpl
        or die "$cfgtmpl: open(<): $!";
    open my $cfgout, ">", $cfg
        or die "$cfg: open(>): $!";
    while (<$cfgin>) {
        s/%COMMITTER_NAME%/$winner->{'cn'}/g;
        s/%COMMITTER_EMAIL%/$winner->{'ce'}/g;
        print $cfgout $_
            or die "$cfg: print: $!";
    }
    close $cfgout
        or warn "$cfg: close: $!";
    close $cfgin
        or warn "$cfgtmpl: close: $!";

    $ENV{'TEST_SMOKE_BRANCH'} = $winner->{'branch'};

    # Execute smoker.
    open my $logfh, ">", $log
        or die "$log: open(>): $!";
    my $pid = open3(\*STDIN, ">&" . fileno($logfh), ">&" . fileno($logfh), @cmd);
    say scalar localtime, " | Started";

    # Wait for the smoker to finish.
    waitpid $pid, 0;
    my $exit_status = $? >> 0;
    say scalar localtime, " | Finished: $exit_status";
    close $logfh
        or warn "$log: close: $!";

    # Replace .git for working.
    move "$workdir/.git", "$worksrcdir/.git"
        or die "$workdir/.git -> $worksrcdir/.git: move: $!";

    # Publish reports on web site. (In case of network outage, it is nonfatal.)
    system $rsync, "-e", $ssh, "-az", "logs/", $log_dst;
    warn "rsync: $?"
        if $?;

    chdir $worksrcdir
        or die "$worksrcdir: chdir: $!";
}

exit 0;

sub remove_gitignore
{
    if ($File::Find::name =~ m{/\.gitignore$}i) {
        unlink $File::Find::name
            or die "$File::Find::name: unlink: $!";
    }
}

sub prep_git
{
    if ($^O eq "MSWin32" && $o{'split'} && !$o{'split-smoke'}) {
        $ENV{PERLDB_OPTS} = "AutoTrace=1 NonStop";
        system "start", "/wait", $^X, "$Bin/$Script", "--split-smoke";
        die "$Bin/$Script: $?"
            if $?;
        return Storable::retrieve("$workdir/$o{'what'}.state");
    }

    # Begin remote section.

    # Switch to a "neutral" branch because "branch -D" fails on the current one.
    # git checkout
    system $git, "checkout", "-q", "-f", "$remote/blead";
    die "git checkout: $?"
        if $?;

    # git fetch
    system $git, "fetch", "-q", "--prune", $remote;
    warn "git fetch: $?"
        if $?;

    # Begin local section.

    # git branch
    my %branch;
    open $fh, "$git branch -av |"
        or die "git branch: open: $?";
    while (<$fh>) {
        chomp;
        if (!/^\*?\s*(?<name>\S+)\s+(?<sha>\S+)\s+(?<subject>.*)$/) {
            warn "'git branch' speaking in tongues? $_\n";
            next;
        }
        next if $+{sha} eq "->";  # references
        $branch{$+{name}} = $+{sha};
    }
    close $fh
        or die "git branch: close: $!";

    # Which remote branches don't match our local?
    my @remote_branches = sort map { s{^remotes/\Q$remote\E/}{} ? $_ : () } grep { /$pattern/ } keys %branch;
    gsay scalar localtime, " | Remote branches:";
    foreach my $branch (sort @remote_branches) {
        gsay scalar localtime, " | ",
            !exists $branch{$branch} || $branch{"remotes/$remote/$branch"} ne $branch{$branch} ? "... " : "    ",
            $branch{"remotes/$remote/$branch"}, "\t", $branch;
    }
    my @candidates = grep { !exists $branch{$_} || $branch{"remotes/$remote/$_"} ne $branch{$_} } @remote_branches;
    if (@candidates == 0) {
        gsay scalar localtime, " | No candidates; sleeping.";
        return;
    }

    # git log
    my @age;
    foreach my $name (@candidates) {
        my $sha = $branch{"remotes/$remote/$name"}
            or die;
        # %ci = commit date, ISO 8601 format
        # %H  = commit hash
        # %cn = committer name
        # %ce = committer email
        # %n  = \n
        open $fh, qq{$git log -1 --pretty=format:"ci=%ci|H=%H|cn=%cn|ce=%ce%n" $sha |}
            or die "git log: open: $?";
        while (<$fh>) {
            chomp;
            my %data = map { /^([^=]+)=(.*)$/ } split /\|/;
            if (keys %data == 0) {
                warn "'git log' speaking in tongues? $_\n";
                next;
            }
            $data{'branch'} = $name;
            push @age, \%data;
        }
        close $fh
            or warn "git log: close($sha): $!";
    }

    # Find the oldest SHA.
    @age = sort { $a->{'ci'} cmp $b->{'ci'} } @age;
    gsay "Smoke order:";
    foreach my $item (@age) {
        my $datetime = $item->{'ci'};
        $datetime =~ s/ [+-]\d{4}$//;
        gsay "  $datetime $item->{'branch'} -- $item->{'cn'} <$item->{'ce'}>";
    }
    my $winner = $age[0];

    # This is likely not needed anymore with the "checkout -f".
    # git clean
    system $git, "clean", "-dxqf";
    die "git clean: $?"
        if $?;

    # git branch
    if (exists $branch{$winner->{'branch'}}) {
        system $git, "branch", "-D", $winner->{'branch'};
        die "git branch: $?"
            if $?;
    }

    # git gc
    system $git, "gc", "--auto", "--quiet";
    die "git gc: $?"
        if $?;

    # git checkout
    system $git, "checkout", "-q", "-f", $winner->{'branch'};
    die "git checkout: $?"
        if $?;

    # This may be no longer necessary since 'branch -D/checkout' starts clean.
    # But we do it anyway in case 'git branch -D' fails miserably. It is
    # better to hallucinate up-to-date than fail to update and spam reports.
    # git pull
    system $git, "pull", "-q", $remote, $winner->{'branch'};
    die "git pull: $?"
        if $?;

    return $winner;
}

sub gsay
{
    if ($o{'split-smoke'}) {
        $messages .= join("", @_) . "\n";
    }
    say @_;
}